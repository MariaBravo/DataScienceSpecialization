Rprof("sss.xjj")
Rprof("tryprofiler.R")
summaryRprof()
y <- 10
x1 <- 5
x2 <- 7
Rprof("tryprofiler.R")
summaryRprof()
lm
x1 <- rnorm(5)
x1 <- rnorm(500)
x2 <- rnorm(500)
summaryRprof()
x1 <- rnorm(500000)
x2 <- rnorm(500000)
summaryRprof()
summaryRprof()
Rprof("tryprofiler.R")
summaryRprof()
summaryRprof("tryprofiler.R")
summaryRprof("tryprofiler.R")
Rprof("tryprofiler.R")
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
x1 <- rnorm(500)
x2 <- rnorm(500)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
x2 <- 100
x1 <- 100
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
?seed
?seed()
seed()
?? seed()
?set.seed()
??set.seed()
examples(set.seed)
example(set.seed)
? RNGkind()
? RNGkind()
runif(1); .Random.seed[1:6]; runif(1); .Random.seed[1:6]
runif(1);
runif(1);
runif(1);
runif(5);
runif(5);
runif(5);
runif(15);
runif(8879999975);
runif(887999997);
runif(8879997);
runif(15);
runif(15);
runif(1);
runif(2);
.Random.seed
rm(.Random.seed); runif(1); .Random.seed[1:6]
runif(1);
rm(.Random.seed); runif(1); .Random.seed[1:6]
runif(1);
runif(1);
runif(1);
runif(1);
runif(1);
.Random.seed
rm(.Random.seed); runif(1); .Random.seed[1:6]
runif(1);
.Random.seed[1:6]
runif(1);
.Random.seed
set.seed(15,87)
set.seed(17)
.Random.seed
runif(1);
runif(1);
runif(1);
runif(1);
runif(1);
rm(.Random.seed); runif(1); .Random.seed[1:6]
runif(1, 5.0, 7.5)
runif(1, 5.0, 7.5)
runif(1, 5.0, 7.5)
runif(1, 5.0, 7.5)
runif(1, 5.0, 7.5)
runif(1, 5.0, 7.5)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
y <- 10
x1 <-  50
x2 <- 40
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
by.total
Rprof()
fit <- lm(y ~ x1 + x2)
by.total
summaryRprof
summaryRprof()
fit <- lm(y ~ x1 + x2)
library(datasets)
Rprof()
library(datasets)
Rprof("zzz.txt")
y <- 10
x1 <- 50
x2 <- 20
library(datasets)
Rprof("zzz.txt")
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof("zzz.txt")
x2 <- 207864
x1 <- 5078469
y <- 107597997
summaryRprof("zzz.txt")
library(datasets)
Rprof("zzz.txt")
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof("zzz.txt")
example(glm)
summaryRprof("zzz.txt")
fit <- lm(y ~ x1 + x2)
library(datasets)
Rprof("zzz.txt")
fit <- lm(y ~ x1 + x2)
summaryRprof("zzz.txt")
install.packages("sqldf")
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(temp)
?mean
temp$X * temp$Prob
temp(1,1)
temp[1,1]
temp[[1]]
temp[[X]]
temp[X
temp[X]
temp[[1]] * temp[[2]]
temp[[2]]
temp[[1]]
temp[[3]]
temp[[4]]
0.1 + 0.4 + 0.9 + 1.6
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(temp)
11/4
d <- data.frame(temp)
mean(d)
d[,mean]
apply()
apply(d, mean)
help apply
install.packages("knitr")
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
library(datasets)
data(airquality)
ggplot2
install.packages("ggplot2")
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
airquality
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
movies
summary(movies)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
library(ggplot2)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + stat_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stat_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
panel.loess(x, y, span = 2/3, degree = 1,
family = c("symmetric", "gaussian"),
evaluation = 50,
lwd, lty, col, col.line, type,
horizontal = FALSE,
..., identifier = "loess")
library(lattice)
panel.loess(x, y, span = 2/3, degree = 1,
family = c("symmetric", "gaussian"),
evaluation = 50,
lwd, lty, col, col.line, type,
horizontal = FALSE,
..., identifier = "loess")
panel.loess(x, y, span = 2/3, degree = 1,
family = c("symmetric", "gaussian"),
evaluation = 50,
lwd, lty, col, col.line, type,
horizontal = FALSE, identifier = "loess")
library(ggplot2)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
?xyplot
library(lattice)
?xyplot
library(ggplot2)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
warnings
warnings()
warn <- 0
warn <- -1
verbose <- FALSE
library(data.table)
library(lubridate)
library(lattice)
library(datasets)
## Simple scatterplot
xyplot(Ozone ~ Wind, data = airquality)
zz <- xyplot(Ozone ~ Wind, data = airquality)
class(zz)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?llpoints
library(lattice)
?llpoints
?lpoints
?axis
?text
?lines
?lpoints
?axis
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
trellis.par.set
?trellis.par.set
?print.tellis
?par
?splom
library(datasets)
data(airquality)
head(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = factor(Month) ~.)
airquality
? facets
library(ggplot2)
? facets
qplot(Wind, Ozone, data = airquality, facets = factor(Month) ~.)
airquality
str(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, smooth = "loess")
?smooth
qplot(votes, rating, data = movies) + geom_smooth()
?geom_smooth
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + stat_smooth("loess")
pnorm(70,80,10)
qnorm(0.95,1100,75)
qnorm(0.95,1100,7.5)
r6 <- pbinom(4, 5, 0.5,)
r6 <- pbinom(4, 5, 0.5)
pbinom(4, 5, 0.5)
pbinom(4, 5, 0.5, lower.tail=F)
pbinom(3, 5, 0.5, lower.tail=F)
pbinom(4, prob = .5, size = 6, lower.tail = TRUE)
pbinom(4, 6, 0.5, lower.tail = TRUE)
pbinom(3, 5, 0.5, lower.tail=TRUE)
pbinom(3, 5, 0.5, lower.tail=FALSE)
ppois(10,15)
ppois(3, lambda = 2.5 * 4)
ppois(10,15)
library(data.table)
f <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", f)
datZero <- data.table(read.csv(bzfile(f)))
# cutting years until 1996 and comments, adding formatted date
dat1 <- datZero[year(strptime( datZero[["BGN_DATE"]] , "%m/%d/%Y %H:%M:%S")) >= 1996]
dat1 <- dat1[, c("STATE__", "BGN_DATE", "COUNTY", "COUNTYNAME", "STATE",
"EVTYPE", "END_DATE", "FATALITIES", "INJURIES", "PROPDMG",
"PROPDMGEXP", "CROPDMG", "CROPDMGEXP") , with = FALSE]
dat1 <- dat1[, bgn_date2:= as.Date(strptime( dat1$BGN_DATE, "%m/%d/%Y %H:%M:%S")) ]
dat1 <- dat1[, bgn_year:= year(bgn_date2) ]
dat1[as.character(dat1$PROPDMGEXP) == "0" & "PROPDMG" > 0, propdmg2 := PROPDMG*1]
dat1[as.character(dat1$PROPDMGEXP) == "K" & "PROPDMG" > 0, propdmg2 := PROPDMG*1000]
dat1[as.character(dat1$PROPDMGEXP) == "M" & "PROPDMG" > 0, propdmg2 := PROPDMG*1000000]
dat1[as.character(dat1$PROPDMGEXP) == "B" & "PROPDMG" > 0, propdmg2 := PROPDMG*1000000000]
dat1[as.character(dat1$CROPDMGEXP) == "0" & "CROPDMG" > 0, cropdmg2 := CROPDMG*1]
dat1[as.character(dat1$CROPDMGEXP) == "K" & "CROPDMG" > 0, cropdmg2 := CROPDMG*1000]
dat1[as.character(dat1$CROPDMGEXP) == "M" & "CROPDMG" > 0, cropdmg2 := CROPDMG*1000000]
dat1[as.character(dat1$CROPDMGEXP) == "B" & "CROPDMG" > 0, cropdmg2 := CROPDMG*1000000000]
datTotEvent <- dat1[order(EVTYPE, bgn_year)]
datTotEvent <- datTotEvent[, by="EVTYPE",
`:=` (totFATALITIES=sum(FATALITIES), totINJURIES=sum(INJURIES),
totPROPDMG=sum(propdmg2), totCROPDMG=sum(cropdmg2))]
datTotEvent <- unique(datTotEvent, by = "EVTYPE")
datTotYear <- dat1[order(bgn_year, EVTYPE)]
datTotYear <- datTotYear[, by=year(dat1$bgn_date2),
`:=` (totFATALITIES=sum(FATALITIES), totINJURIES=sum(INJURIES),
totPROPDMG=sum(propdmg2), totCROPDMG=sum(cropdmg2))]
datTotYear <- unique(datTotYear, by = "bgn_year")
datQ1 <- datTotEvent[order(totFATALITIES, totINJURIES, decreasing = TRUE)]
datQ1 <- datQ1[totFATALITIES > 0,]
datQ1 <- datQ1[order(totFATALITIES, decreasing = TRUE)]
levelsQ1 <- datQ1[,c("EVTYPE", "totFATALITIES"), with=FALSE]
levelsQ1 <- levelsQ1[order(totFATALITIES, decreasing=TRUE)]
levelsQ1 <- levelsQ1[["EVTYPE"]]
datQ1 <- transform(datQ1, EVTYPE = factor(EVTYPE, levels = levelsQ1))
datQ1 <- head(datQ1,10)
datQ2 <- datTotEvent[order(totPROPDMG, totCROPDMG, decreasing = TRUE)]
datQ2 <- datQ2[totPROPDMG > 0 | totCROPDMG > 0,]
datQ2 <- datQ2[order(totPROPDMG, totCROPDMG, decreasing = TRUE)]
levelsQ2 <- datQ2[,c("EVTYPE", "totPROPDMG", "totCROPDMG"), with=FALSE]
levelsQ2 <- levelsQ2[order(totPROPDMG, totCROPDMG, decreasing=TRUE)]
levelsQ2 <- levelsQ2[["EVTYPE"]]
datQ2 <- transform(datQ2, EVTYPE = factor(EVTYPE, levels = levelsQ2))
datQ2 <- head(datQ2,10)
View(datQ1)
View(dat1)
head(datZero)
dat1 <- datZero[year(strptime( datZero[["BGN_DATE"]] , "%m/%d/%Y %H:%M:%S")) >= 1996]
dat1 <- dat1[, c("LATITUDE", "LONGITUDE", "STATE__", "BGN_DATE", "COUNTY", "COUNTYNAME", "STATE",
"EVTYPE", "END_DATE", "FATALITIES", "INJURIES", "PROPDMG",
"PROPDMGEXP", "CROPDMG", "CROPDMGEXP") , with = FALSE]
dat1 <- dat1[, bgn_date2:= as.Date(strptime( dat1$BGN_DATE, "%m/%d/%Y %H:%M:%S")) ]
dat1 <- dat1[, bgn_year:= year(bgn_date2) ]
dat1[as.character(dat1$PROPDMGEXP) == "0" & "PROPDMG" > 0, propdmg2 := PROPDMG*1]
dat1[as.character(dat1$PROPDMGEXP) == "K" & "PROPDMG" > 0, propdmg2 := PROPDMG*1000]
dat1[as.character(dat1$PROPDMGEXP) == "M" & "PROPDMG" > 0, propdmg2 := PROPDMG*1000000]
dat1[as.character(dat1$PROPDMGEXP) == "B" & "PROPDMG" > 0, propdmg2 := PROPDMG*1000000000]
dat1[as.character(dat1$CROPDMGEXP) == "0" & "CROPDMG" > 0, cropdmg2 := CROPDMG*1]
dat1[as.character(dat1$CROPDMGEXP) == "K" & "CROPDMG" > 0, cropdmg2 := CROPDMG*1000]
dat1[as.character(dat1$CROPDMGEXP) == "M" & "CROPDMG" > 0, cropdmg2 := CROPDMG*1000000]
dat1[as.character(dat1$CROPDMGEXP) == "B" & "CROPDMG" > 0, cropdmg2 := CROPDMG*1000000000]
datTotEvent <- dat1[order(EVTYPE, bgn_year)]
datTotEvent <- datTotEvent[, by="EVTYPE",
`:=` (totFATALITIES=sum(FATALITIES), totINJURIES=sum(INJURIES),
totPROPDMG=sum(propdmg2), totCROPDMG=sum(cropdmg2))]
datTotEvent <- unique(datTotEvent, by = "EVTYPE")
datTotYear <- dat1[order(bgn_year, EVTYPE)]
datTotYear <- datTotYear[, by=year(dat1$bgn_date2),
`:=` (totFATALITIES=sum(FATALITIES), totINJURIES=sum(INJURIES),
totPROPDMG=sum(propdmg2), totCROPDMG=sum(cropdmg2))]
datTotYear <- unique(datTotYear, by = "bgn_year")
datQ1 <- datTotEvent[order(totFATALITIES, totINJURIES, decreasing = TRUE)]
datQ1 <- datQ1[totFATALITIES > 0,]
datQ1 <- datQ1[order(totFATALITIES, decreasing = TRUE)]
levelsQ1 <- datQ1[,c("EVTYPE", "totFATALITIES"), with=FALSE]
levelsQ1 <- levelsQ1[order(totFATALITIES, decreasing=TRUE)]
levelsQ1 <- levelsQ1[["EVTYPE"]]
datQ1 <- transform(datQ1, EVTYPE = factor(EVTYPE, levels = levelsQ1))
datQ1 <- head(datQ1,10)
datQ2 <- datTotEvent[order(totPROPDMG, totCROPDMG, decreasing = TRUE)]
datQ2 <- datQ2[totPROPDMG > 0 | totCROPDMG > 0,]
datQ2 <- datQ2[order(totPROPDMG, totCROPDMG, decreasing = TRUE)]
levelsQ2 <- datQ2[,c("EVTYPE", "totPROPDMG", "totCROPDMG"), with=FALSE]
levelsQ2 <- levelsQ2[order(totPROPDMG, totCROPDMG, decreasing=TRUE)]
levelsQ2 <- levelsQ2[["EVTYPE"]]
datQ2 <- transform(datQ2, EVTYPE = factor(EVTYPE, levels = levelsQ2))
datQ2 <- head(datQ2,10)
View(datQ2)
NAMES(DAT1)
names(dat1)
dat1[, LATITUDE > 0]
Z <- dat1[, LATITUDE > 0]
sum(Z)
Z
sum(Z)
str(Z)
View(dat1)
mn <- 1100
n <- 9
s <- 30
mn + c(-1,1)*qt(0.95, n-1) * s/sqrt(n)
library(datasets); data(mtcars)
round(t.test(mtcars$mpg)$conf.int)
attr
t.test(mtcars$mpg)$conf.int
round(mn + c(-1,1)*qt(0.95, n-1) * s/sqrt(n))
mn <- 1100
n <- 9
s <- 30
mn + c(-1,1)*qt(0.95, n-1) * s/sqrt(n)
mn <- 1100
n <- 9
s <- 30
mn + c(-1,1)*qt(0.95, n) * s/sqrt(n)
mn <- 1100
n <- 9
s <- 30
mn + c(-1,1)*qt(0.025, n-1) * s/sqrt(n)
# Q4 T conf.int
pooledVariance <- function(v, n, sq.root = FALSE){
res <- sum((n-1)*v)/(sum(n) - 2)
if (sq.root) {
return(sqrt(res))
}
return(res)
}
confintPool <- function(m, v, n){
spool <- pooledVariance(v, n, T)
res <- m + c(-1, 1)*spool*qt(0.975, sum(n)-2)*sqrt(sum(1/n))
return(res)
}
confintPool
qnorm(0.95,1100,sqrt(75/100))
qnorm(0.95,mean=1100,sd = 75/10)
pbinom(3,size=5,prob=0.5)
pbinom(3,size=5,prob=0.5, lower.tail=FALSE)
ppois(10, 15)
choose(9,3)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/Assign2.R', echo=TRUE)
setwd("C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis")
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/Assign2.R', echo=TRUE)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot1.R', echo=TRUE)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot2.R', echo=TRUE)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot3.R', echo=TRUE)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot4.R', echo=TRUE)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot5.R', echo=TRUE)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot6.R', echo=TRUE)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot1.R', echo=TRUE)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot2.R', echo=TRUE)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot3.R', echo=TRUE)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot4.R', echo=TRUE)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot5.R', echo=TRUE)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot6.R', echo=TRUE)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot4.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot5.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(NEIonRoadcomp)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot6.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot6.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(labeling)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot1.R', echo=TRUE)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot2.R', echo=TRUE)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot3.R', echo=TRUE)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot5.R', echo=TRUE)
source('C:/Users/Luchy/Desktop/Coursera/Exploratory Data Analysis/plot6.R', echo=TRUE)
